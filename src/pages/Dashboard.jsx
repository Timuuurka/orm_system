import React, { useState } from "react";
import { useAuth } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";
import MapSearch from "../components/MapSearch";
import { fetchPlaceDetails } from "../services/googlePlaces";
import { analyzeSentiment } from "../services/sentiment";
import { GOOGLE_MAPS_API_KEY } from "../config";

const sentimentColors = {
  positive: "#4caf50",
  neutral: "#9e9e9e",
  negative: "#f44336",
  unknown: "#000000",
};

const Dashboard = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  const [selectedBusiness, setSelectedBusiness] = useState(null);
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(false);
  const [analyzing, setAnalyzing] = useState(false);

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  const handlePlaceSelected = async (place) => {
    setSelectedBusiness(place);
    setLoading(true);
    setAnalyzing(false);
    setReviews([]);

    try {
      console.log("üìç –í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ:", place);
      const details = await fetchPlaceDetails(place.place_id, GOOGLE_MAPS_API_KEY);
      const originalReviews = details.reviews || [];

      console.log("üí¨ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤:", originalReviews.length);

      setReviews(originalReviews); // —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
      setLoading(false);
      setAnalyzing(true);

      const reviewsWithSentiment = await Promise.all(
        originalReviews.map(async (review) => {
          try {
            const sentiment = await analyzeSentiment(review.text);
            console.log(`üîé –û—Ç–∑—ã–≤: "${review.text}" -> –°–µ–Ω—Ç–∏–º–µ–Ω—Ç: ${sentiment}`);
            return { ...review, sentiment };
          } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞:", err);
            return { ...review, sentiment: "unknown" };
          }
        })
      );

      console.log("‚úÖ –û—Ç–∑—ã–≤—ã —Å —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–æ–º:", reviewsWithSentiment);
      setReviews(reviewsWithSentiment);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –º–µ—Å—Ç–∞:", err.message);
    } finally {
      setLoading(false);
      setAnalyzing(false);
    }
  };

  return (
<div style={{ marginTop: "2rem", textAlign: "center" }}>
  <h2 style={{ color: "#e91e63", fontSize: "2rem", fontWeight: "bold" }}>
    –Ø —Ç–µ–±—è –ª—é–±–ª—é –ê–ô–ó–ï–†–ï<span style={{ color: "red", fontSize: "2.5rem" }}>‚ù§Ô∏è</span>
  </h2>
</div>

  );
};

export default Dashboard;
